// import { createSlice } from '@reduxjs/toolkit';
// import * as actions from '../products/asyncAction';

// export const productSlice = createSlice({
//     name: 'product',
//     initialState: {
//         newProducts: null,
//         errorMessage: '',
//         dealDaily: null,
//     },
//     reducers: {
//         getDealDaily: (state, action) => {
//             state.dealDaily = action.payload;
//         },
//     },
//     // Code logic xá»­ lÃ½ async action
//     extraReducers: (builder) => {
//         builder.addCase(actions.getNewProducts.pending, (state) => {
//             state.isLoading = true;
//         });

//         // Khi thá»±c hiá»‡n action login thÃ nh cÃ´ng (Promise fulfilled)
//         builder.addCase(actions.getNewProducts.fulfilled, (state, action) => {
//             // Táº¯t tráº¡ng thÃ¡i loading, lÆ°u thÃ´ng tin user vÃ o store
//             state.isLoading = false;
//             state.newProducts = action.payload;
//         });

//         // Khi thá»±c hiá»‡n action actions tháº¥t báº¡i (Promise rejected)
//         builder.addCase(actions.getNewProducts.rejected, (state, action) => {
//             // Táº¯t tráº¡ng thÃ¡i loading, lÆ°u thÃ´ng bÃ¡o lá»—i vÃ o store
//             state.isLoading = false;
//             state.errorMessage = action.payload.message;
//         });
//     },
// });

// export const { getDealDaily } = productSlice.actions;

// export default productSlice.reducer;

// import { createSlice } from '@reduxjs/toolkit';
// import * as actions from '../products/asyncAction';

// export const productSlice = createSlice({
//     name: 'product',
//     initialState: {
//         newProducts: null,
//         errorMessage: '',
//         dealDaily: null,
//         lastViewedCategory: null, // â¬… ThÃªm giÃ¡ trá»‹ máº·c Ä‘á»‹nh
//     },
//     reducers: {
//         getDealDaily: (state, action) => {
//             state.dealDaily = action.payload;
//         },
//         setLastViewedCategory: (state, action) => {
//             state.lastViewedCategory = action.payload; // â¬… Cáº­p nháº­t category khi xem sáº£n pháº©m
//         },
//     },
//     extraReducers: (builder) => {
//         builder.addCase(actions.getNewProducts.pending, (state) => {
//             state.isLoading = true;
//         });
//         builder.addCase(actions.getNewProducts.fulfilled, (state, action) => {
//             state.isLoading = false;
//             state.newProducts = action.payload;
//         });
//         builder.addCase(actions.getNewProducts.rejected, (state, action) => {
//             state.isLoading = false;
//             state.errorMessage = action.payload.message;
//         });
//     },
// });

// export const { getDealDaily, setLastViewedCategory } = productSlice.actions;
// export default productSlice.reducer;

import { createSlice } from '@reduxjs/toolkit';
import * as actions from '../products/asyncAction';

// ðŸŸ¢ Láº¥y lastViewedCategory tá»« localStorage (náº¿u cÃ³)
const initialCategory = localStorage.getItem('lastViewedCategory') || null;

export const productSlice = createSlice({
    name: 'product',
    initialState: {
        newProducts: null,
        errorMessage: '',
        dealDaily: null,
        lastViewedCategory: initialCategory, // ðŸŸ¢ DÃ¹ng dá»¯ liá»‡u tá»« localStorage
    },
    reducers: {
        getDealDaily: (state, action) => {
            state.dealDaily = action.payload;
        },
        setLastViewedCategory: (state, action) => {
            state.lastViewedCategory = action.payload; // ðŸŸ¢ Cáº­p nháº­t Redux
            localStorage.setItem('lastViewedCategory', action.payload); // ðŸ”¥ LÆ°u vÃ o localStorage
        },
    },
    extraReducers: (builder) => {
        builder.addCase(actions.getNewProducts.pending, (state) => {
            state.isLoading = true;
        });
        builder.addCase(actions.getNewProducts.fulfilled, (state, action) => {
            state.isLoading = false;
            state.newProducts = action.payload;
        });
        builder.addCase(actions.getNewProducts.rejected, (state, action) => {
            state.isLoading = false;
            state.errorMessage = action.payload.message;
        });
    },
});

export const { getDealDaily, setLastViewedCategory } = productSlice.actions;
export default productSlice.reducer;
